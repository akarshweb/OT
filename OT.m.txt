STEEPEST


clear all;
clc;

syms x1 x2

f=x1^2+x2^2+5*x1*x2+6*x1;
fx=inline(f)
fx(0,0)
fobj=@(X)fx(X(1),X(2))

grad=gradient(f)
G=inline(grad);
Gx=@(X)G(X(1),X(2));

% Make Hessian Matrix
H1=hessian(f)

X0=[1 1];
maxiter=10;
curriter=0;
tol=10^(-3);

X=[]

% Where 6 is no. of iterations
while(curriter < maxiter && norm(Gx(X0)) >= tol )
    S=-Gx(X0)
    lambda=S'*S/(S'*H1*S)
    X0=X0+lambda*S'
    X=[X;X0]
    curriter=curriter+1;
end

X
fobj(X0)








LEAST COST


c=[2 10 4 5;6 12 8 11;3 9 5 7];   % cost Matrix
a=[12 25 20];    % supplies 
b=[25 10 15 5];  % demand

m=size(c,1);
n=size(c,2); %col

% Add Dummy row or column if unbalanced TP
if(sum(a)==sum(b))
    fprintf("Balanced Transportation Problem")
else
    fprintf("Unbalanced Transportation Problem")
    if(sum(a)<sum(b))
        c(end+1,:)=zeros(1,n);
        a(end+1)=sum(b)-sum(a);
        m=m+1;
    else
        c(:,end+1)=zeros(m,1);
        b(end+1)=sum(a)-sum(b);
        n=n+1;
    end
end

% min(c)  % returns minimum for the each column
% or
% convert matrix to vector using c(:) 
% Then find Minimum of this vector using min(c(:))

%Find least cost
origc=c;
allocation=zeros(m,n);


sum1=0;
while(1)
    cpq=min(min(c));  % find minimum of whole matrix

    % When all allocations done then break
    if(cpq==inf)
        break
    end
    [p1,q1]=find(cpq==c);  % find index of this minimum element
    % p1 has row no. and q1 has col no.
    
    p=p1(1);
    q=q1(1);
    
    % Do allocation
    allocation(p,q)=min(a(p),b(q));
    % update a and b
    a(p)=a(p)-allocation(p,q);
    b(q)=b(q)-allocation(p,q);
    
    sum1=sum1+allocation(p,q)*c(p,q);
    if(min(a(p),b(q))==a(p))
        c(p,:)=inf;
    else
        c(:,q)=inf;
    end
end

c
allocation
a
b
sum1








SIMPLEX



clc
clear all
cost=[2 1 0 0 0 0];
 a=[1 2 1 0 0;1 1 0 1 0;1 -1 0 0 1];
 b=[10;6;2];
A=[a b];
 Var={'x1','x2','s1','s2','s3','sol'}
 bv=[3 4 5]; % position of s1, s2, s3
zjcj=cost(bv)*A-cost;               
% Display initial simplex table
simplex_table=[A; zjcj]
array2table(simplex_table,'VariableNames',Var)
RUN=true;
 while RUN
if any(zjcj(1:end-1)<0) % check for negative valueoptamility condition
 fprintf(' The current BFS is not optimal \n');
 zc=zjcj(1:end-1);
 [Enter_val, pvt_col]= min(zc) ; %array 
 if all(A(:,pvt_col)<=0)
  error('LPP is Unbounded');
 else
 sol=A(:,end);
 column=A(:,pvt_col);
  for i=1:size(A,1)
 if column(i)>0   % pivot column value positive
 ratio(i)= sol (i)./column(i);
 else
 ratio(i)=inf;
 end
  end 
  [leaving_value,pvt_row]=min(ratio);
 end
 bv(pvt_row)=pvt_col;    % replaced leaving variable with entering variable
 pvt_key=A(pvt_row, pvt_col);
 A(pvt_row,:)=A (pvt_row,:)./pvt_key;
 % row operation 
for i=1:size(A,1)
 if i~=pvt_row
 A(i,:)=A(i,:)-A (i, pvt_col).*A(pvt_row,:);
 end
end
 zjcj=cost(bv)*A-cost;
 next_table=[zjcj; A];
array2table(next_table,'VariableNames',Var)

else
    RUN=false;
    
    fprintf('The final optimal value is % f \n',zjcj(end));
end
Â end









BIG M




clc
clear all
M=1000;
 
cost=[5 3 0 0 0 -M 0];
a=[1 1 1 0 0 0;5 2 0 1 0 0;2 8 0 0 -1 1];
b=[2;10;12];
artifical_var=[6];
bv=[3 4 6];

A=[a b];
Var={'x1','x2','s1','s2','s3','A1','sol'};

zjcj=cost(bv)*A-cost;
% Display initial simplex table
simplex_table=[zjcj; A];
array2table(simplex_table,'VariableNames',Var)
RUN=true;
 while RUN
if any(zjcj(1:end-1)<0) % check for negative value
 fprintf(' The current BFS is not optimal \n');
 zc=zjcj(1:end-1);
 [Enter_val, pvt_col]= min(zc) ;
 if all(A(:,pvt_col)<=0)
  error('LPP is Unbounded');
 else
 sol=A(:,end);
 column=A(:,pvt_col);
  for i=1:size(A,1)
 if column(i)>0
 ratio(i)= sol (i)./column(i);
 else
 ratio(i)=inf;
 end
  end 
  [leaving_value,pvt_row]=min(ratio);
 end
 bv(pvt_row)=pvt_col;
 pvt_key=A(pvt_row, pvt_col);
 A(pvt_row,:)=A (pvt_row,:)./pvt_key;
 % row operation 
for i=1:size(A,1)
 if i~=pvt_row
 A(i,:)=A(i,:)-A (i, pvt_col).*A(pvt_row,:);
 end
end
 zjcj=cost(bv)*A-cost;
 next_table=[zjcj; A];
array2table(next_table,'VariableNames',Var)

else
    RUN=false;
    if any(bv==artifical_var(1))
        error('Infeasible solution');
    else
    fprintf('The table is optimal \n');
    end
    z=input(' Enter 0 for minimization and 1 for max \n');
   
    if z==0
        Obj_value=-zjcj(end);
    else
        Obj_value=zjcj(end);
    end
    fprintf('The final optimal value is % f \n',Obj_value);
end
 end












